enable
configure terminal
service internal
line con 0
exec-timeout 0 0    
exit
line vty 0 4
exec-timeout 0 0
end

term shell

function power() {
	let inter= $p - 8
	pow=`sh int te1/1/$inter tra | tail 2 | cut -d " " -f 7`
	echo Rx Power = $pow dBm
}

function start() {
	test platform hardware fed switch active port $p phy prbs start prbs-31
}

function stop() {
	test platform hardware fed switch active port $p phy prbs stop prbs-31
}

function check() {
	test platform hardware fed switch active port $p phy prbs show-stats
}

function clearstat() {
	test platform hardware fed switch active port $p phy prbs clear-stats
}

function redo() {
	stop
	sleep 5
	clearstat
	start
	sleep 5
}

function prbstest() {
if (( $1 && $2 )); then
	exitbit=0
	p=$1
	length=$2
	clearstat
	echo " "
	let err=`check | cut -d "x" -f 2`
	echo Error count: $err
	echo " "
	echo "Starting $length minute test..."
	echo " "
	for x in `sh int | nl | cut -d":" -f 1 | head $length`; do
		if [[ $exitbit == 1 ]]; then
			let placeholdervar=0
		else;
			let x=$x
			let y=$x /2
			let err=`check | cut -d "x" -f 2`
			if [[ $x -ge 2 ]]; then
				for a in 1 2 3 4 5 6; do
					sleep 10
					let err=`check | cut -d "x" -f 2`
					echo " Error Count: $err"
				done
				echo " $err Error(s) in $x minutes."
				if [[ $err -le $y ]]; then
					echo " "
				else;
					echo " "
					echo "Too many errors :("
					exitbit=1
					echo " "
				fi
			else;
				for z in 1 2 3 4 5 6; do
					sleep 10
					let err=`check | cut -d "x" -f 2`
					echo " Error Count: $err"
				done
				echo " $err Error(s) in $x minute."
				if [[ $err -gt 1 ]]; then
					echo " "
					echo "Too many errors :("
					exitbit=1
					echo " "
				fi
				echo " "
			fi
		fi
	done
	power
	echo " "
else;
	echo " "
	echo "Usage: prbstest <port> <time>"
	echo " "
fi
}

wr
